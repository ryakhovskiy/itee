--$$GEN_SCHEMA$$#ISM_HOST_SEQ#SEQUENCE#1
create sequence "$$GEN_SCHEMA$$"."$$NAME$$" increment by 1 start with 1 minvalue 1 maxvalue 4611686018427387903 no cycle

--$$SCHEMA$$#DI_ISM_STATISTICS#TABLE#0
CREATE ROW TABLE "$$SCHEMA$$"."$$NAME$$" (
     "TS_SECONDS" SECONDDATE CS_SECONDDATE,
	 "PROCESS_CPU" SMALLINT CS_INT,
	 "MEMORY_USED_SIZE" INT CS_INT,
	 "RESPONSE_TIME" INT CS_INT,
	 "ACTIVE_THREAD_COUNT" INT CS_INT,
	 "FINISHED_NON_INTERNAL_REQUEST_COUNT" BIGINT CS_FIXED
)

--$$GEN_SCHEMA$$#ISM_HOST_RUN_LOG#TABLE#0
CREATE ROW TABLE "$$GEN_SCHEMA$$"."$$NAME$$" (
     "TYPE" CHAR(1) CS_FIXEDSTRING,
	 "UPD_TIMESTAMP" LONGDATE CS_LONGDATE,
	 "UUID" NVARCHAR(64) CS_STRING,
	 "STATUS" INT CS_INT,
	 "COMMENT" NVARCHAR(1023) CS_STRING,
	 "JOB_NAME" NVARCHAR(63) CS_STRING,
	 "FK_TRIGGERED" LONGDATE CS_LONGDATE,
	 "TRIGGERED" LONGDATE CS_LONGDATE,
	 "STARTED" LONGDATE CS_LONGDATE,
	 "FINISHED" LONGDATE CS_LONGDATE,
	 "HOST" NVARCHAR(64) CS_STRING
)

--$$GEN_SCHEMA$$#ISM_HOST_TRIGGER_LOG#TABLE#0
CREATE ROW TABLE "$$GEN_SCHEMA$$"."$$NAME$$" (
     "ID" BIGINT CS_FIXED,
	 "UPD_TIMESTAMP" LONGDATE CS_LONGDATE,
	 "ACTION" CHAR(1) CS_FIXEDSTRING,
	 "HOST" NVARCHAR(64) CS_STRING,
	 PRIMARY KEY ( "ID" )
)

--$$SCHEMA$$#DI_ISM_INITIAL#PROCEDURE#0
CREATE PROCEDURE "$$SCHEMA$$"."$$NAME$$"(
  IN job_id NVARCHAR(64),
  IN job_ts TIMESTAMP,
  IN host NVARCHAR(64)
)
LANGUAGE SQLSCRIPT
SQL SECURITY INVOKER AS
BEGIN
	DELETE FROM "$$SCHEMA$$"."DI_ISM_STATISTICS";

	INSERT INTO "$$SCHEMA$$"."DI_ISM_STATISTICS"
	SELECT TO_SECONDDATE(CURRENT_TIMESTAMP), AVG(PROCESS_CPU), SUM(TOTAL_MEMORY_USED_SIZE)/1024/1024 AS MEMORY_USED_SIZE, AVG(RESPONSE_TIME), SUM(ACTIVE_THREAD_COUNT), SUM(FINISHED_NON_INTERNAL_REQUEST_COUNT)
	FROM M_SERVICE_STATISTICS l
	LEFT JOIN M_SERVICE_MEMORY r
	ON l.SERVICE_NAME = r.SERVICE_NAME
	WHERE l.SERVICE_NAME = 'indexserver' AND r.SERVICE_NAME = 'indexserver'
		AND PROCESS_CPU != -1 AND (l.HOST = :host OR :host = '_NO_LIM_')
	GROUP BY l.SERVICE_NAME;
END

--$$SCHEMA$$#DI_ISM_DELTA#PROCEDURE#0
CREATE PROCEDURE "$$SCHEMA$$"."$$NAME$$"(
  IN job_id NVARCHAR(64),
  IN job_ts TIMESTAMP,
  IN host NVARCHAR(64)
)
LANGUAGE SQLSCRIPT
SQL SECURITY INVOKER AS
BEGIN
	INSERT INTO "$$SCHEMA$$"."DI_ISM_STATISTICS"
	SELECT TO_SECONDDATE(CURRENT_TIMESTAMP), AVG(PROCESS_CPU), SUM(TOTAL_MEMORY_USED_SIZE)/1024/1024 AS MEMORY_USED_SIZE, AVG(RESPONSE_TIME), SUM(ACTIVE_THREAD_COUNT), SUM(FINISHED_NON_INTERNAL_REQUEST_COUNT)
	FROM M_SERVICE_STATISTICS l
	LEFT JOIN M_SERVICE_MEMORY r
	ON l.SERVICE_NAME = r.SERVICE_NAME
	WHERE l.SERVICE_NAME = 'indexserver' AND r.SERVICE_NAME = 'indexserver'
		AND PROCESS_CPU != -1 AND (l.HOST = :host OR :host = '_NO_LIM_')
	GROUP BY l.SERVICE_NAME;
END

--$$GEN_SCHEMA$$#ISM_HOST_GET_INITIAL_KEYS#PROCEDURE#0
CREATE PROCEDURE "$$GEN_SCHEMA$$"."$$NAME$$"(
  IN job_id NVARCHAR(64),
  IN job_ts TIMESTAMP
)
LANGUAGE SQLSCRIPT
SQL SECURITY INVOKER AS
BEGIN
	SELECT '_NO_LIM_' FROM DUMMY;
END;

--$$GEN_SCHEMA$$#ISM_HOST_GET_DELTA_KEYS#PROCEDURE#0
CREATE PROCEDURE "$$GEN_SCHEMA$$"."$$NAME$$"(
  IN job_id NVARCHAR(64),
  IN job_ts TIMESTAMP
)
LANGUAGE SQLSCRIPT
SQL SECURITY INVOKER AS
BEGIN
	SELECT '_NO_LIM_' FROM DUMMY;
END;

--$$GEN_SCHEMA$$#ISM_HOST_RESTART_ERRORS#PROCEDURE#0
CREATE PROCEDURE "$$GEN_SCHEMA$$"."$$NAME$$"(
)
LANGUAGE SQLSCRIPT
SQL SECURITY INVOKER AS
BEGIN
	uuids =
		SELECT UUID
		FROM "$$GEN_SCHEMA$$"."ISM_HOST_RUN_LOG"
		WHERE STATUS = (SELECT ID FROM "$$SCHEMA$$"."RT_STATUS_DESC" WHERE NAME = 'E')
		FOR UPDATE;

	keys = SELECT DISTINCT HOST AS HOST
		FROM "$$GEN_SCHEMA$$"."ISM_HOST_RUN_LOG"
		WHERE STATUS = (SELECT ID FROM "$$SCHEMA$$"."RT_STATUS_DESC" WHERE NAME = 'B')
			AND UUID IN (SELECT UUID FROM :UUIDS);

	INSERT INTO "$$GEN_SCHEMA$$"."ISM_HOST_TRIGGER_LOG"
	SELECT
		"$$GEN_SCHEMA$$"."ISM_HOST_SEQ".NEXTVAL,
		CURRENT_UTCTIMESTAMP,
		'r',
		HOST
	FROM :keys;

	DELETE FROM "$$GEN_SCHEMA$$"."ISM_HOST_RUN_LOG" WHERE UUID IN (SELECT UUID FROM :uuids);
END

--$$GEN_SCHEMA$$#ISM_CLEANUP_TRIGGER_LOG#PROCEDURE#0
CREATE PROCEDURE "$$GEN_SCHEMA$$"."$$NAME$$"()
LANGUAGE SQLSCRIPT SQL SECURITY INVOKER AS
BEGIN
	DELETE FROM "$$GEN_SCHEMA$$"."ISM_HOST_TRIGGER_LOG";
END

--$$GEN_SCHEMA$$#ISM_ARCHIVE_RUN_LOG#PROCEDURE#0
CREATE PROCEDURE "$$GEN_SCHEMA$$"."$$NAME$$"
	SQL SECURITY INVOKER AS
BEGIN
	uuids = SELECT UUID FROM "$$GEN_SCHEMA$$"."ISM_HOST_RUN_LOG" WHERE STATUS = 50;

	DATA = SELECT T.JOB_NAME, T.TYPE, T.UPD_TIMESTAMP, T.UUID, T.TRIGGERED, S.STARTED, F.FINISHED,0 AS SLA_MILLIS
		FROM "$$GEN_SCHEMA$$"."ISM_HOST_RUN_LOG" T
			INNER JOIN "$$GEN_SCHEMA$$"."ISM_HOST_RUN_LOG" S  ON  T.UUID = S.UUID AND T.STATUS = 0 AND S.STATUS = 20
			INNER JOIN "$$GEN_SCHEMA$$"."ISM_HOST_RUN_LOG" F  ON T.UUID = F.UUID AND F.STATUS = 50;

	INSERT INTO "$$SCHEMA$$"."RT_RUN_LOG_HISTORY"  SELECT * FROM :DATA;

	DELETE FROM "$$GEN_SCHEMA$$"."ISM_HOST_RUN_LOG" WHERE UUID IN (SELECT UUID FROM :uuids);
END

--$$GEN_SCHEMA$$#ISM_CLEANUP_TRIGGER_LOG#PROCEDURE#0
CREATE PROCEDURE "$$GEN_SCHEMA$$"."$$NAME$$"()
LANGUAGE SQLSCRIPT SQL SECURITY INVOKER AS
BEGIN
	DELETE FROM "$$GEN_SCHEMA$$"."ISM_HOST_TRIGGER_LOG";
END

--$$INTP$$#ISM#STATEMENT#2
DO
BEGIN
    UPSERT "$$SCHEMA$$"."RT_PROJECT_DEFINITIONS" VALUES ('$$NAME$$', 0, 'EVENT', 'Index Server Monitor', 'Monitors and stores index server statistics.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 1, '$$SCHEMA$$', '$$SCHEMA$$', 0, 5, 3, 0) WHERE PROJECT_ID = '$$NAME$$' AND VERSION = 0;
    UPSERT "$$SCHEMA$$"."RT_PROJECT_KEYS" VALUES ('$$NAME$$', 1, 1, 0, 'HOST', 'NVARCHAR(64)', 'X', '', 10, 'X', '') WHERE PROJECT_ID = '$$NAME$$' AND VERSION = 0;
    UPSERT "$$SCHEMA$$"."RT_PROJECT_PROCEDURES" VALUES ('$$NAME$$', 1, 'I', 'DI_ISM_INITIAL',0,'SP','HAVA_DEV') WHERE PROJECT_ID = '$$NAME$$' AND VERSION = 0 AND TYPE ='I';
    UPSERT "$$SCHEMA$$"."RT_PROJECT_PROCEDURES" VALUES ('$$NAME$$', 1, 'D', 'DI_ISM_DELTA',0,'SP','HAVA_DEV') WHERE PROJECT_ID = '$$NAME$$' AND VERSION = 0 AND TYPE ='D';
    UPSERT "$$SCHEMA$$"."RT_ACTIVE_PROJECTS" VALUES ('$$NAME$$', 0, 0, '',null,'Stopped', true) WHERE PROJECT_ID = '$$NAME$$' AND VERSION = 0;
    UPSERT "$$SCHEMA$$"."RT_LIFECYCLE_JOBS" VALUES ('$$NAME$$', 'ARCHIVE RUN_LOG', '"$$GEN_SCHEMA$$"."ISM_ARCHIVE_RUN_LOG"', 0, null, null, 1, 'Y') WHERE PROJECT_ID = '$$NAME$$';
    UPSERT "$$SCHEMA$$"."RT_PROJECT_TABLES" VALUES ('$$NAME$$', 1, 'HOST', 0) WHERE PROJECT_ID = '$$NAME$$' AND VERSION = 0;
    UPSERT "$$SCHEMA$$"."RT_PARAMETERS" VALUES ('$$NAME$$', 0, CURRENT_TIMESTAMP,
    '{"initial":{"calendar":{"firstdayofcalendaryear":null,"lastdayofcalendaryear":null,"firstdayoffiscalyear":null,"lastdayoffiscalyear":null,"firstdayofcalendarmonth":null,"lastdayofcalendarmonth":null,"firstdayofaccountingperiod":null,"lastdayofaccountingperiod":null,"firstdayofpayrollperiod":null,"lastdayofpayrollperiod":null,"firstdayofbiweeklyperiod":null,"lastdayofbiweeklyperiod":null},"executors":2,"conn_type":"pool","period":0,"fullload":false,"flrestrictions":"","scheduling":"PERIOD","periodchoice":"SECONDS"},"delta":{"calendar":{"firstdayofcalendaryear":null,"lastdayofcalendaryear":null,"firstdayoffiscalyear":null,"lastdayoffiscalyear":null,"firstdayofcalendarmonth":null,"lastdayofcalendarmonth":null,"firstdayofaccountingperiod":null,"lastdayofaccountingperiod":null,"firstdayofpayrollperiod":null,"lastdayofpayrollperiod":null,"firstdayofbiweeklyperiod":null,"lastdayofbiweeklyperiod":null},"executors":2,"conn_type":"pool","period":5,"scheduling":"PERIOD","periodchoice":"SECONDS"},"history":false,"sla":200}') WHERE PROJECT_ID = '$$NAME$$' AND VERSION = 0;
END

--$$GEN_SCHEMA$$#ISM_RUNTIME_INFO#VIEW#0
CREATE VIEW "$$GEN_SCHEMA$$"."ISM_RUNTIME_INFO" (
    "TYPE",
	 "STATUS",
	 "UUID",
	 "FK_TRIGGERED",
	 "TRIGGERED",
	 "STARTED",
	 "P-STARTED",
	 "P-FINISHED",
	 "WAIT_TIME",
	 "PROC_TIME",
	 "ALL_TIME",
	 "HOST" ) AS select
	 t.TYPE,
	 CASE WHEN e.UUID IS NOT NULL
THEN 'ERROR' WHEN f.UUID IS NOT NULL
THEN 'DONE' WHEN p.UUID IS NOT NULL
THEN 'RUN' WHEN s.UUID IS NOT NULL
THEN 'STARTED'
ELSE 'WAIT'
END AS STATE,
	 t.UUID,
	 TO_VARCHAR(t.FK_TRIGGERED,
	 'DD-MM-YYYY HH24:MI:SS' ) as FK_TRIGGERED,
	 TO_VARCHAR(t.TRIGGERED,
	 'DD-MM-YYYY HH24:MI:SS' ) as TRIGGERED,
	 TO_VARCHAR(s.STARTED ,
	 'DD-MM-YYYY HH24:MI:SS' ) as STARTED,
	 TO_VARCHAR(p.STARTED,
	 'HH24:MI:SS.FF3' ) as "P-STARTED",
	 TO_VARCHAR(p.FINISHED,
	 'HH24:MI:SS.FF3' ) as "P-FINISHED",
	 NANO100_BETWEEN(t.FK_TRIGGERED,
	 s.STARTED) / 10000000.0 as WAIT_TIME,
	 NANO100_BETWEEN(p.STARTED,
	 p.FINISHED) / 10000000.0 as PROC_TIME,
	 NANO100_BETWEEN(t.FK_TRIGGERED,
	 f.FINISHED) / 10000000.0 as ALL_TIME,
	 p.HOST
FROM "$$GEN_SCHEMA$$"."ISM_HOST_RUN_LOG" t
LEFT JOIN "$$GEN_SCHEMA$$"."ISM_HOST_RUN_LOG" s ON t.UUID = s.UUID
AND s.STATUS = (select
	 id
	FROM "$$SCHEMA$$"."RT_STATUS_DESC"
	WHERE NAME = 'S')
LEFT JOIN "$$GEN_SCHEMA$$"."ISM_HOST_RUN_LOG" p ON t.UUID = p.UUID
AND p.STATUS = (select
	 id
	FROM "$$SCHEMA$$"."RT_STATUS_DESC"
	WHERE NAME = 'P')
LEFT JOIN "$$GEN_SCHEMA$$"."ISM_HOST_RUN_LOG" f ON t.UUID = f.UUID
AND f.STATUS = (select
	 id
	FROM "$$SCHEMA$$"."RT_STATUS_DESC"
	WHERE NAME = 'F')
LEFT JOIN "$$GEN_SCHEMA$$"."ISM_HOST_RUN_LOG" e ON t.UUID = e.UUID
AND e.STATUS = (select
	 id
	FROM "$$SCHEMA$$"."RT_STATUS_DESC"
	WHERE NAME = 'E')
WHERE t.STATUS = (select
	 id
	FROM "$$SCHEMA$$"."RT_STATUS_DESC"
	WHERE NAME = 'T')
ORDER BY t.TRIGGERED DESC WITH READ ONLY

--$$GEN_SCHEMA$$#ISM_LIFECYCLE_LOG#VIEW#0
CREATE VIEW "$$GEN_SCHEMA$$"."ISM_LIFECYCLE_LOG" ( "TRIGGERED",
	 "STATUS",
	 "NAME",
	 "WAIT_TIME",
	 "PROC_TIME",
	 "ALL_TIME",
	 "COMMENT" ) AS select
	 t.UPDATE_TS as TRIGGERED,
	 CASE WHEN e.UUID IS NOT NULL
THEN 'ERROR' WHEN f.UUID IS NOT NULL
THEN 'FINISHED' WHEN s.UUID IS NOT NULL
THEN 'STARTED'
ELSE 'TRIGGERED'
END AS STATUS,
	 t.NAME,
	 nano100_between(t.UPDATE_TS,
	 s.UPDATE_TS) / 10000000.0 as WAIT_TIME,
	 nano100_between(s.UPDATE_TS,
	 f.UPDATE_TS) / 10000000.0 as PROC_TIME,
	 nano100_between(t.UPDATE_TS,
	 f.UPDATE_TS) / 10000000.0 as ALL_TIME,
	 e.comment
FROM "$$SCHEMA$$"."RT_LIFECYCLE_LOG" t
LEFT JOIN "$$SCHEMA$$"."RT_LIFECYCLE_LOG" s ON t.UUID = s.UUID
AND t.STATUS = 0
AND s.STATUS = 20
LEFT JOIN "$$SCHEMA$$"."RT_LIFECYCLE_LOG" f ON t.UUID = f.UUID
AND f.STATUS = 50
LEFT JOIN "$$SCHEMA$$"."RT_LIFECYCLE_LOG" e ON t.UUID = e.UUID
AND e.STATUS = 100
WHERE t.PROJECT_ID = 'ISM'
ORDER BY 1 DESC WITH READ ONLY